service: habit-api 

provider:
  name: aws
  runtime: nodejs8.10
  profile: serverless
  stage: dev
  region: us-east-1
  tracing:
    lambda: true
  environment:
    NODE_ENV: ${env:NODE_ENV}
    HABIT_TABLE: ${self:custom.config.HABIT_TABLE}
    USER_TABLE: ${self:custom.config.USER_TABLE}
    EVENT_TABLE: ${${self:custom.config.EVENT_TABLE}}
    REDIS_HOST:
      "Fn::GetAtt": [ElasticCacheCluster, RedisEndpoint.Address]
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateTable
      Resource: 
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.config.HABIT_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.config.HABIT_TABLE}/index/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.config.USER_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.config.USER_TABLE}/index/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/$${self:custom.config.EVENT_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/$${self:custom.config.EVENT_TABLE}/index/*"
    - Effect: Allow
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"

functions:
  graphql:
    handler: app.graphql
    events:
      - http:
          path: graphql
          method: post
          cors: true
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
      subnetIds:
        - Ref: PrivateSubnetA
  pushNotifications:
    handler: lib/pushNotifications.handler
    events:
      - schedule:
          name: push-notification-handler
          description: 'Sends push notification reminding user to train.'
          rate: rate(10 days)
      - http:
          path: notification
          method: get

plugins:
  - serverless-offline

resources:
 Resources:
  - ${file(resources/UserTable.yml)}
  - ${file(resources/HabitTable.yml)}
  - ${file(resources/EventTable.yml)}
  VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
  IP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - IP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetA
  PrivateSubnetA:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: ${self:provider.region}a
      CidrBlock: "10.0.1.0/24"
  PublicSubnetA:
    DependsOn: VPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: ${self:provider.region}a
      CidrBlock: "10.0.2.0/24"
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociationLambdaPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTable
  SubnetRouteTableAssociationLambdaPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTable
  ServerlessSecurityGroup:
    DependsOn: VPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for Serverless Functions
      VpcId:
        Ref: VPC
  ServerlessStorageSecurityGroup:
    DependsOn: VPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Ingress for Redis Cluster
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '6379'
        ToPort: '6379'
        SourceSecurityGroupId:
          Ref: ServerlessSecurityGroup
  ServerlessCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "Cache Subnet Group"
      SubnetIds:
      - Ref: PrivateSubnetA
  ElasticCacheCluster:
    DependsOn: ServerlessStorageSecurityGroup
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: true
      Engine: redis
      CacheNodeType: ${self:custom.config.CACHE_INSTANCE_SIZE}
      NumCacheNodes: 1
      VpcSecurityGroupIds:
      - "Fn::GetAtt": ServerlessStorageSecurityGroup.GroupId
      CacheSubnetGroupName:
        Ref: ServerlessCacheSubnetGroup

custom:
  config:
    CACHE_INSTANCE_SIZE: cache.t1.micro
    HABIT_TABLE: habit-records-${self:provider.stage}
    USER_TABLE: user-records-${self:provider.stage}
    EVENT_TABLE: event-records-${self:provider.stage}