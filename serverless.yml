service: habit-api 

provider:
  name: aws
  runtime: nodejs8.10
  profile: serverless
  stage: dev
  region: us-east-1
  environment:
    NODE_ENV: ${env:NODE_ENV}
    REDIS_HOST:
      "Fn::Join": [":", ["Fn::GetAtt": [ServerlessElasticacheCluster, ConfigurationEndpoint.Address], "Fn::GetAtt": [ServerlessElasticacheCluster, ConfigurationEndpoint.Port]]]  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateTable
      Resource: 
        - "arn:aws:dynamodb:us-east-1:229409410964:table/habit-records"
        - "arn:aws:dynamodb:us-east-1:229409410964:table/habit-records/index/*"
        - "arn:aws:dynamodb:us-east-1:229409410964:table/user-records"
        - "arn:aws:dynamodb:us-east-1:229409410964:table/user-records/index/*"
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"

functions:
  grahpql:
    handler: app.handler
    events:
      - http:
          path: graphql
          method: post
          cors: true
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
      subnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
  playground:
    handler: app.handler
    events:
       - http:
          path: playground
          method: get
  pushNotifications:
    handler: lib/pushNotifications.handler
    events:
      - schedule:
          name: push-notification-handler
          description: 'Sends push notification reminding user to train.'
          rate: rate(10 days)
      - http:
          path: notification
          method: get

plugins:
  - serverless-offline

resources:
 Resources:
  HabitDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: habit_id
          AttributeType: S
        -
          AttributeName: created_at
          AttributeType: S
        -
          AttributeName: user_id
          AttributeType: S

      KeySchema:
        -
          AttributeName: habit_id
          KeyType: HASH
        -
          AttributeName: created_at
          KeyType: RANGE

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      
      GlobalSecondaryIndexes:
        -
          IndexName: UserIndex
          KeySchema:
            -
              AttributeName: user_id
              KeyType: HASH
            -
              AttributeName: created_at
              KeyType: RANGE

          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
           ReadCapacityUnits: 5
           WriteCapacityUnits: 5

      TableName: habit-records

  UserDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: user_id
          AttributeType: S
        -
          AttributeName: created_at
          AttributeType: S
        -
          AttributeName: email
          AttributeType: S
        -
          AttributeName: push_token
          AttributeType: S
        -
          AttributeName: reminder
          AttributeType: S


      KeySchema:
        -
          AttributeName: user_id
          KeyType: HASH
        -
          AttributeName: created_at
          KeyType: RANGE

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      
      GlobalSecondaryIndexes:
        -
          IndexName: EmailIndex
          KeySchema:
            -
              AttributeName: email
              KeyType: HASH
            -
              AttributeName: created_at
              KeyType: RANGE

          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
           ReadCapacityUnits: 5
           WriteCapacityUnits: 5

        -
          IndexName: PushNotificationIndex
          KeySchema:
            -
              AttributeName: push_token
              KeyType: HASH
            -
              AttributeName: reminder
              KeyType: RANGE      
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
           ReadCapacityUnits: 5
           WriteCapacityUnits: 5
      
      TableName: user-records

  ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    ServerlessSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.0.0/24"
    ServerlessSubnetB:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: "10.0.1.0/24"
    ServerlessSubnetC:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}d
        CidrBlock: "10.0.2.0/24"
    ServerlessSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC
    ServerlessStorageSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Redis Cluster
        VpcId:
          Ref: ServerlessVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup
    ServerlessElasticacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: "Cache Subnet Group"
        SubnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
    ServerlessElasticacheCluster:
      DependsOn: ServerlessStorageSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        AutoMinorVersionUpgrade: true
        Engine: redis
        CacheNodeType: cache.t1.micro
        NumCacheNodes: 1
        VpcSecurityGroupIds:
        - "Fn::GetAtt": ServerlessStorageSecurityGroup.GroupId
        CacheSubnetGroupName:
          Ref: ServerlessElasticacheSubnetGroup